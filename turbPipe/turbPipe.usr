C This is a round turbulent pipe flow example

#define ZLENGTH  5.0

c
C-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - forcing function for fluid (f)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
C-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      FFY = 0.0
      FFX = 0.0
      FFZ = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      include 'SIZE'
      include 'TOTAL'

      data icalld /0/
      save icalld

      real x0(3)
      data x0 /0.0, 0.0, 0.0/
      save x0

      integer bIDs(1)
      save iobj_wall

      save atime,timel,drag_avg

      if (ifneknek) call neknek_exchange

c      return

      if (icalld.eq.0) then
        bIDs(1) = 1
        call create_obj(iobj_wall,bIDs,1)
        drag_avg = 0
        atime    = 0
        timel    = time
        icalld   = 1
      endif

      dtime = time - timel
      atime = atime + dtime

      ! averaging over time
      if (atime.ne.0. .and. dtime.ne.0.) then
        beta      = dtime / atime
        alpha     = 1. - beta

        call torque_calc(1.0,x0,.false.,.false.) ! compute wall shear
        drag_avg = alpha*drag_avg + beta*dragz(iobj_wall)
      endif

      rho    = param(1)
      dnu    = param(2)
      A_w    = 2*pi * 0.5 * ZLENGTH
      tw     = drag_avg / A_w
      u_tau  = sqrt(tw / rho)
      Re_tau = u_tau * 0.5 / dnu
      if (nid.eq.0) write(6,*) 'Re_tau', Re_tau 

      timel = time

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      xr = x/0.5
      yr = y/0.5
      rr = xr*xr + yr*yr
      if (rr.gt.0) rr=sqrt(rr)
      th = atan2(y,x)
      zo = 2*pi*z/ZLENGTH

      uz = 6.*(1-rr**6)/5.

c     Assign a wiggly shear layer near the wall
      amp_z    = 0.35  ! Fraction of 2pi for z-based phase modification
      freq_z   = 4     ! Number of wiggles in axial- (z-) direction
      freq_t   = 9     ! Frequency of wiggles in azimuthal-direction

      amp_tht  = 5     ! Amplification factor for clipped sine function
      amp_clip = 0.2   ! Clipped amplitude

      blt      = 0.07  ! Fraction of boundary layer with momentum deficit

      phase_z = amp_z*(2*pi)*sin(freq_z*zo)

      arg_tht = freq_t*th + phase_z
      amp_sin = 5*sin(arg_tht)
      if (amp_sin.gt. amp_clip) amp_sin =  amp_clip
      if (amp_sin.lt.-amp_clip) amp_sin = -amp_clip

      if (rr.gt.(1-blt)) uz = uz + amp_sin

c     Quick P-independent randomizer
      big  = 1.e3*eg + 1.e2*ix + 1.e1*iy + 1.e0*iz
      rand = sin(big)

      ux   = .05*rand*rand
      uy   = .10*rand*rand*rand
      uz   = uz + .01*rand

      temp = 0.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'

      z0 = -ZLENGTH
      z1 = 0. 
      call rescale_x(zm1,z0,z1)

      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'W  ') boundaryID(ifc,iel) = 1
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3

      include 'SIZE'
      include 'TOTAL'

      param(54) = -3  ! use >0 for const flowrate or <0 bulk vel
                      ! flow direction is given by (1=x, 2=y, 3=z)
      param(55) = 1.0 ! flowrate/bulk-velocity

      if (ifneknek) call neknek_setup 

      return
      end
