c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
 
      if (y.gt.0) ffy = temp*temp/y

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
 
      qvol = 0.
      if (y.gt.0) then
         visc = param(2)
         qvol = -uy*temp/y
      endif
 
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      real x0(3)
      save x0
      data x0 /3*0/

      integer bIDs(1), iobj_wall(1)
      
      umin = 1.e9            ! Scan for min velocity near axis
      n = nx1*ny1*nz1*nelv
      do i=1,n
         y=ym1(i,1,1,1)
         if (y.le.0.01) umin = min(umin,vx(i,1,1,1))
      enddo
      umin = glmin(umin,1)

      if (nid.eq.0.and.mod(istep,20).eq.0) write(6,1) istep,time,umin
    1 format(i9,1p2e15.6,' umin')

c     define objects for surface integrals
      if (istep.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall(1),bIDs,1)
      endif
      if (mod(istep,100).eq.0) call torque_calc(1.0,x0,.false.,.true.)
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0

      x1 = 2.00   ! Height of canister
      x0 = 1.96   ! Location of start of highest element

      xx = (x-x0)/(x1-x0)
      if (x.gt.x0) temp=y*xx**(lx1-1)  ! Polynomial ramp

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

c     mark faces for object definition
      nface = 2*ndim
      do iel=1,nelt
         do iface = 1, nface
            if (cbc(iface,iel,1) .eq. 'W  ') then
               boundaryID(iface,iel) = 1
            endif
         enddo 
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------