#include "experimental/rans_komg.f"
c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_mut,rans_mutsk,rans_mutso,rans_turbPrandtl
      real mu_t,Pr_t

      e = gllel(eg)

      Pr_t=rans_turbPrandtl
      mu_t=rans_mut(ix,iy,iz,e)

      if(ifield.eq.1) then
        t(ix,iy,iz,e,4)=mu_t/cpfld(ifield,1) !store eddy viscosity for post processing
        udiff = cpfld(ifield,1)+mu_t
        utrans = cpfld(ifield,2)
      elseif(ifield.eq.2) then
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
        utrans = cpfld(ifield,2)
      elseif(ifield.eq.3) then !use rho and mu from field 1
        udiff = cpfld(1,1)+rans_mutsk(ix,iy,iz,e)
        utrans = cpfld(1,2)
      elseif(ifield.eq.4) then !use rho and mu from field 1
        udiff = cpfld(1,1)+rans_mutso(ix,iy,iz,e)
        utrans = cpfld(1,2)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      integer ix,iy,iz,e,eg

c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_kSrc,rans_omgSrc
      real rans_kDiag,rans_omgDiag

      e = gllel(eg)

      if(ifield.eq.3) then
        qvol = rans_kSrc(ix,iy,iz,e)
        avol = rans_kDiag(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_omgSrc(ix,iy,iz,e)
        avol = rans_omgDiag(ix,iy,iz,e)
      else
        qvol = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
      integer ix,iy,iz,iside,e,eg
    
C     U, TKE, and Omg are all zero on the wall 
      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg

      e = gllel(eg)

      ux   = 1.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      if(ifield.eq.3) temp = 0.01
      if(ifield.eq.4) temp = 0.2

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real xmax,xmin,ymax,ymin,zmax,zmin
      real ptA(3),ptB(3)
      
      if(istep.eq.nsteps) then
        call domain_size(xmin,xmax,ymin,ymax,zmin,zmax)
        ptA(1) = 0.5*(xmin+xmax)
        ptA(2) = ymax
        ptA(3) = 0.5*(zmin+zmax)
        ptB(1) = ptA(1)
        ptB(2) = ymin
        ptB(3) = ptA(3)
        call RANSplot(ptA,ptB,1001)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none
      include 'SIZE'
      include 'TOTAL'

C     enforce constant average velocity
      param(54) = -1
      param(55) = 1.0

c     suppress runtime statistics
      param(120) = nsteps

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer n,iel,ifc,id_face
      real xmin,xmax,ymin,ymax,scaley,scalex
      real glmin,glmax

      integer ifld_k,ifld_t,m_id,w_id
      real coeffs(30) !array for passing custom coeffs to RANS model
      logical ifcoeffs !flag to use custom or default coeffs

      n=nx1*ny1*nz1*nelv


C     rescale the domain BEFORE calling rans_init
      xmin=glmin(xm1,n)
      xmax=glmax(xm1,n)
      ymin=glmin(ym1,n)
      ymax=glmax(ym1,n)

      scalex=3.0/8.0/(xmax-xmin) !make the elements square on average
      scaley=1.0/(ymax-ymin)

      call cmult(xm1,scalex,n)
      call cmult(ym1,scaley,n)


C     set BCs for velocity and temperature for 3rd party mesh
C     tke and omega/tau are handled by rans_init
C     do this BEFORE calling rans_init

c     do iel=1,nelv
c     do ifc=1,2*ndim
c       id_face = bc(5,ifc,iel,1)
c       if (id_face.eq.1) then        ! dirichlet (inlet)  BCs
c          cbc(ifc,iel,1) = 'v  '
c          cbc(ifc,iel,2) = 't  '
c       elseif (id_face.eq.2) then    ! Wall / heat flux BCs
c          cbc(ifc,iel,1) = 'W  '
c          cbc(ifc,iel,2) = 'f  '
c       elseif (id_face.eq.3) then    ! Outlet BCs
c          cbc(ifc,iel,1) = 'O  '
c          cbc(ifc,iel,2) = 'I  '
c       endif
c     enddo
c     enddo


C     Setup RANS model, this MUST be done in usrdat2

      ifld_k = 3         !field number for tke, t(1,1,1,1,ifld_k-1)
      ifld_t = 4         !field number for omega/tau, t(1,1,1,1,ifld_t-1)
      ifcoeffs = .false. !set to true to pass custom coefficients

C     Available models:
c     m_id = 0 !regularized standard k-omega
c     m_id = 1 !regularized low-Re k-omega
c     m_id = 2 !regularized standard k-omega SST
c     m_id = 3 !non-regularized standard k-omega (NOT SUPPORTED)
      m_id = 4 !standard k-tau
c     m_id = 5 !low-Re k-tau

C     Wall distance function:
c     w_id = 0 ! user specified
c     w_id = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      w_id = 2 ! distf (coordinate difference, provides smoother function)

      call rans_init(ifld_k,ifld_t,ifcoeffs,coeffs,w_id,wd,m_id)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      return
      end
C-----------------------------------------------------------------------
      subroutine RANSplot(pt1,pt2,lpts)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real pt1(ldim),pt2(ldim)
      integer npts,lpts,iplot

      character*32 fname
      character*14 afmt
      character*10 rfmt
      integer intp_h,i,j,nt,nfld
      save intp_h
      logical ifset,ifdo
      real dx,pts(lhis,ldim)
      real fwrk(lx1*ly1*lz1*lelt,ldim+1+ldimt)
      real fpts(lhis*(ldim+1+ldimt))
      real uout(lhis),vout(lhis),wout(lhis)
      real prout(lhis),tout(lhis,ldimt)
      character*4 outname(ldim+1+ldimt)

      real rwrk(lhis,ldim+1)
      integer iwrk(lhis,3)
      save rwrk,iwrk

      save ifdo,ifset
      data ifdo /.true./
      data ifset /.true./

      save iplot
      data iplot /1/

      if(.not.ifdo) return

      nt=lx1*ly1*lz1*nelt

      npts=max(lpts,2)
      if(npts.gt.lhis) then
        if(nio.eq.0) write(*,*)
     &       "Error, recompile with lhis in SIZE >= ",npts
        ifdo=.false.
        return
      endif

      call rzero(pts,npts*ndim)
      do j=1,ndim
        pts(1,j)=pt1(j)
        dx=(pt2(j)-pt1(j))/(real(npts-1))
        do i=2,npts
          pts(i,j)=pts(i-1,j)+dx
        enddo
      enddo

      if(ifset)then
        ifset=.false.
        call interp_setup(intp_h,0.0,0,nelt)
      endif

      nfld=0
      if(ifvo) then
        write(outname(1),'(a4)')"VELX"
        write(outname(2),'(a4)')"VELY"
        call copy(fwrk(1,1),vx,nt)
        call copy(fwrk(1,2),vy,nt)
        nfld=2
      endif
      if(if3d.and.ifvo)then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"VELZ"
        call copy(fwrk(1,nfld),vz,nt)
      endif
      if(ifpo) then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"PRES"
        call copy(fwrk(1,nfld),pr,nt)
      endif
      if(ifheat) then
        if(ifto) then
          nfld=nfld+1
          write(outname(nfld),'(a4)')"TEMP"
          call copy(fwrk(1,nfld),t,nt)
        endif
        do i=1,ldimt-1
          if(ifpsco(i)) then
            nfld=nfld+1
            write(outname(nfld),'(a2,i2)')"PS",i
            call copy(fwrk(1,nfld),t(1,1,1,1,i+1),nt)
          endif
        enddo
      endif

      if(nfld.gt.0) then
        call blank(fname,32)
        if(iplot.lt.10) then
          write(fname,'(a,i1,a)') "plot",iplot,".dat"
        elseif(iplot.lt.100) then
          write(fname,'(a,i2,a)') "plot",iplot,".dat"
        else
          write(fname,'(a,i3,a)') "plot",iplot,".dat"
        endif

        if(nio.eq.0) then
          write(*,*)'   Writing line plot data to file ',fname
          if(if3d)then
            write(*,'(7x,3es15.6)')pt1(1),pt1(2),pt1(3)
            write(*,'(7x,3es15.6)')pt2(1),pt2(2),pt2(3)
          else
            write(*,'(7x,2es15.6)')pt1(1),pt1(2)
            write(*,'(7x,2es15.6)')pt2(1),pt2(2)
          endif
          write(*,*)
        endif

        call interp_nfld(fpts,fwrk,nfld,pts(1,1),pts(1,2),pts(1,3),npts
     &                                    ,iwrk,rwrk,lhis,.true.,intp_h)

        call blank(afmt,14)
        call blank(rfmt,10)
        if(if3d) then
          write(afmt,'(a1,i2,a11)')"(",nfld+3,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+3,"es16.8)"
        else
          write(afmt,'(a1,i2,a11)')"(",nfld+2,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+2,"es16.8)"
        endif

        if(nio.eq.0) then
          open(unit=10,file=fname,status='unknown',form='formatted')
          if(if3d) then
            write(10,afmt)"X","Y","Z",(outname(i),i=1,nfld),time
          else
            write(10,afmt)"X","Y",(outname(i),i=1,nfld),time
          endif
          do i=1,npts
            if(if3d) then
              write(10,rfmt)pts(i,1),pts(i,2),pts(i,3)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            else
              write(10,rfmt)pts(i,1),pts(i,2)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            endif
          enddo
        endif

        close(10)

        iplot=iplot+1
      endif

      return
      end
c-----------------------------------------------------------------------
