c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk    ! called once per step
      include 'SIZE'
      include 'TOTAL'

c     to keep constatn flow rate in azimuthal direction
      if (istep.gt.0) call vol_flow_azm
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (i,j,k,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer eg
c     
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (i,j,k,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ogeom/ ox(lx1,ly1,lz1,lelv)
     $             , oy(lx1,ly1,lz1,lelv)
      integer e,eg
c
      e = gllel(eg)

      xo = ox(i,j,k,e)
      yo = oy(i,j,k,e)
      radi = 1.0/sqrt(xo**2+yo**2)
      cosa = yo*radi
      sina = xo*radi

      r2 = (x-xo)**2 + (y-yo)**2 + z**2
      ub = 2.0*(1 - r2)       ! ubar = 1.
      ux =  ub*cosa
      uy = -ub*sina
      uz = 0.0

      temp = 0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
c
c     Force exterior points to unit circle in working precision
c
      e1 = 1.0
      e1 = e1 - 1.e-4
      do ie=1,nelt
      do i=1,8
        rr = xc(i,ie)*xc(i,ie) + yc(i,ie)*yc(i,ie)
        if (rr.gt.e1) then
           rr = sqrt(rr)
           rn = 1./rr
           xc(i,ie) = rn*xc(i,ie)
           yc(i,ie) = rn*yc(i,ie)
c          write(6,1) ie,i,rn,xc(i,ie),yc(i,ie),' rnew'
        endif
      enddo
      enddo
    1 format(2i5,1p3e18.9,a5)
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      common /ogeom/ ox(lx1,ly1,lz1,lelv)
     $             , oy(lx1,ly1,lz1,lelv)

c     rotate mesh to set the centre of the pipe along x-axis
      do iel = 1, nelt
         do kl = 1,lz1
            do jl = 1,ly1
               do il = 1,lx1
                  rtmp = xm1(il,jl,kl,iel)
                  xm1(il,jl,kl,iel) = zm1(il,jl,kl,iel)
                  zm1(il,jl,kl,iel) = - rtmp
               enddo
            enddo
         enddo
      enddo

c     rescale the mesh
      nn = lx1*ly1*lz1*nelt
      xmin = glmin(xm1,nn)
      xmax = glmax(xm1,nn)
      scale = 0.5*pi/(xmax-xmin)
      do il =1,nn
         xm1(il,1,1,1) = scale*xm1(il,1,1,1)
      enddo

c     new centre of the plane
      radius = 2.0
       do iel = 1, nelt
         do kl = 1,lz1
            do jl = 1,ly1
               do il = 1,lx1
                  angle = xm1(il,jl,kl,iel)
                  ox(il,jl,kl,iel) = radius*sin(angle)
                  oy(il,jl,kl,iel) = radius*cos(angle)
                  xm1(il,jl,kl,iel) = ox(il,jl,kl,iel) +
     $                 ym1(il,jl,kl,iel)*sin(angle)
                  ym1(il,jl,kl,iel) = oy(il,jl,kl,iel) +
     $                 ym1(il,jl,kl,iel)*cos(angle)
               enddo
            enddo
         enddo
      enddo
      
      param(59) = 1.   !  All elements deformed
      ifxyo     = .true.
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      param(55) = 0.0           ! turn off original code
      param(56) = 1.0           ! set ubar
      return
      end
c-----------------------------------------------------------------------
c     Set of routines to define volume forcing to keep constant mass flow
c     in azimuthal direction. These routines are adapted from original
c     vol_flow routines
      subroutine vol_flow_azm
c     Adust flow volume at end of time step to keep flow rate fixed by
c     adding an appropriate multiple of the linear solution to the Stokes
c     problem arising from a unit forcing in the azimuthal direction.
c     pff 6/28/98 (updated 7/11/11)

      include 'SIZE'
      include 'TOTAL'

      parameter (kx1=lx1,ky1=ly1,kz1=lz1,kx2=lx2,ky2=ly2,kz2=lz2)
      common /cvflow_a/ vxc(kx1,ky1,kz1,lelv)
     $                , vyc(kx1,ky1,kz1,lelv)
     $                , vzc(kx1,ky1,kz1,lelv)
     $                , prc(kx2,ky2,kz2,lelv)
      common /cvflow_r/ target_ubar,base_ubar,domain_length,xsec
     $                , scale_vf(3)
c
      real bd_vflow,dt_vflow
      save bd_vflow,dt_vflow
      data bd_vflow,dt_vflow /-99.,-99./
c
c     param (56) -- average velocity, if nonzero

      if (param(56).eq.0.) return
      if (kx1.eq.1) then
         call exitti('ABORT: Recompile vol_flow with kx1=lx1$',kx1)
      endif


c     If either dt or the backwards difference coefficient change,
c     then recompute base flow solution corresponding to unit forcing:

      if (dt.ne.dt_vflow.or.bd(1).ne.bd_vflow.or.ifmvbd.or.
     $                     (ifuservp .and. .not. ifexplvis) )
     $   call compute_vol_soln_azm(vxc,vyc,vzc,prc)
      dt_vflow = dt
      bd_vflow = bd(1)

      ntot1 = nx1*ny1*nz1*nelv
      ntot2 = nx2*ny2*nz2*nelv

      current_ubar = get_ubar_azm(vx,vy,vz)
      target_ubar  = param(56)
      delta_ubar   = target_ubar-current_ubar

c     Note, this scale factor corresponds to FFX, provided FFX has
c     not also been specified in userf.   If ffx is also specified
c     in userf then the true FFX is given by ffx_userf + scale.

      scale = delta_ubar/base_ubar
      if (nid.eq.0) write(6,1) istep
     $   ,time,scale,delta_ubar,current_ubar,target_ubar
    1    format(i8,e14.7,1p4e13.5,' volflow')

      call add2s2(vx,vxc,scale,ntot1)
      call add2s2(vy,vyc,scale,ntot1)
      call add2s2(vz,vzc,scale,ntot1)
      call add2s2(pr,prc,scale,ntot2)

      return
      end
c-----------------------------------------------------------------------
      subroutine compute_vol_soln_azm(vxc,vyc,vzc,prc)

c     Compute the solution to the time-dependent Stokes problem
c     with unit forcing, and find associated flow rate.
c     pff 2/28/98

      include 'SIZE'
      include 'TOTAL'
c
      real vxc(lx1,ly1,lz1,lelv)
     $   , vyc(lx1,ly1,lz1,lelv)
     $   , vzc(lx1,ly1,lz1,lelv)
     $   , prc(lx2,ly2,lz2,lelv)
c
      common /cvflow_r/ target_ubar,base_ubar,domain_length,xsec
     $                , scale_vf(3)

      if (ifsplit) then
         call plan4_vol_azm(vxc,vyc,vzc,prc)
      else
         call plan3_vol_azm(vxc,vyc,vzc,prc)
      endif

c     Compute base flow rate
      base_ubar = get_ubar_azm(vxc,vyc,vzc)
 
      if (nid.eq.0) write(6,1) istep,base_ubar,target_ubar
    1    format(i9,1p2e13.5,' basflow')

      return
      end
c-----------------------------------------------------------------------
      subroutine plan4_vol_azm(vxc,vyc,vzc,prc)

c     Compute pressure and velocity using fractional step method.
c     (Tombo splitting scheme).

      include 'SIZE'
      include 'TOTAL'

      real vxc(lx1*ly1*lz1*lelv)
     $   , vyc(lx1*ly1*lz1*lelv)
     $   , vzc(lx1*ly1*lz1*lelv)
     $   , prc(lx2*ly2*lz2*lelv)

      common /scrns/ resv1 (lx1*ly1*lz1*lelv)
     $ ,             resv2 (lx1*ly1*lz1*lelv)
     $ ,             resv3 (lx1*ly1*lz1*lelv)
     $ ,             respr (lx1*ly1*lz1*lelv)
      common /scrvh/ h1    (lx1*ly1*lz1*lelv)
     $ ,             h2    (lx1*ly1*lz1*lelv)


      n = nx1*ny1*nz1*nelv

c     Compute pressure

      call makebf_azm (vxc,vyc,vzc) ! Store Bf in Vc.
      call opdssum    (vxc,vyc,vzc)
      do i=1,n
         vxc(i) = vxc(i)*binvm1(i,1,1,1)/vtrans(i,1,1,1,1)
         vyc(i) = vyc(i)*binvm1(i,1,1,1)/vtrans(i,1,1,1,1)
         vzc(i) = vzc(i)*binvm1(i,1,1,1)/vtrans(i,1,1,1,1)
      enddo

      call cdtp(respr,vxc,rxm2,sxm2,txm2,1)
      call cdtp(resv2,vyc,rym2,sym2,tym2,1)
      call add2(respr,resv2,n)
      if (if3d) then
         call cdtp(resv2,vzc,rzm2,szm2,tzm2,1)
         call add2(respr,resv2,n)
      endif

      call ortho    (respr)
      call ctolspl  (tolspl,respr)
      call hmholtz  ('PRES',prc,respr,h1,h2,pmask,vmult,
     $                             imesh,tolspl,nmxh,1)
      call ortho    (prc)

C     Compute velocity

      call opgrad   (resv1,resv2,resv3,prc)
      if (ifaxis) call col2 (resv2,omask,n)
      call opchsgn  (resv1,resv2,resv3)

      do i=1,n ! add forcing
         resv1(i)=resv1(i)+v1mask(i,1,1,1)*bm1(i,1,1,1)*vxc(i)
         resv2(i)=resv2(i)+v2mask(i,1,1,1)*bm1(i,1,1,1)*vyc(i)
         resv3(i)=resv3(i)+v3mask(i,1,1,1)*bm1(i,1,1,1)*vzc(i)
      enddo

      if (ifexplvis) call split_vis ! split viscosity into exp/imp part

      intype = -1
      call sethlm   (h1,h2,intype)
      call ophinv   (vxc,vyc,vzc,resv1,resv2,resv3,h1,h2,tolhv,nmxh)

      if (ifexplvis) call redo_split_vis ! restore vdiff

      return
      end
c-----------------------------------------------------------------------
      subroutine plan3_vol_azm(vxc,vyc,vzc,prc)
c
c     Compute pressure and velocity using fractional step method.
c     (PLAN3).
c
c
      include 'SIZE'
      include 'TOTAL'
c
      real vxc(lx1,ly1,lz1,lelv)
     $   , vyc(lx1,ly1,lz1,lelv)
     $   , vzc(lx1,ly1,lz1,lelv)
     $   , prc(lx2,ly2,lz2,lelv)
C
      COMMON /SCRNS/ rw1   (LX1,LY1,LZ1,LELV)
     $ ,             rw2   (LX1,LY1,LZ1,LELV)
     $ ,             rw3   (LX1,LY1,LZ1,LELV)
     $ ,             dv1   (LX1,LY1,LZ1,LELV)
     $ ,             dv2   (LX1,LY1,LZ1,LELV)
     $ ,             dv3   (LX1,LY1,LZ1,LELV)
     $ ,             RESPR (LX2,LY2,LZ2,LELV)
      COMMON /SCRVH/ H1    (LX1,LY1,LZ1,LELV)
     $ ,             H2    (LX1,LY1,LZ1,LELV)
      COMMON /SCRHI/ H2INV (LX1,LY1,LZ1,LELV)

c     Compute velocity, 1st part 
c
      ntot1  = lx1*ly1*lz1*nelv
      ntot2  = lx2*ly2*lz2*nelv
      ifield = 1

      call makebf_azm (rw1,rw2,rw3) ! Store Bf in rw
      call opdssum    (rw1,rw2,rw3)
c
      intype = -1
      call sethlm   (h1,h2,intype)
      call ophinv   (vxc,vyc,vzc,rw1,rw2,rw3,h1,h2,tolhv,nmxv)
      call ssnormd  (vxc,vyc,vzc)
c
c     Compute pressure  (from "incompr")
c
      intype = 1
      dtinv  = 1./dt
c
      call rzero   (h1,ntot1)
      call copy    (h2,vtrans(1,1,1,1,ifield),ntot1)
      call cmult   (h2,dtinv,ntot1)
      call invers2 (h2inv,h2,ntot1)
      call opdiv   (respr,vxc,vyc,vzc)
      call chsign  (respr,ntot2)
      call ortho   (respr)
c
c
c     Set istep=0 so that h1/h2 will be re-initialized in eprec
      i_tmp = istep
      istep = 0
      call esolver (respr,h1,h2,h2inv,intype)
      istep = i_tmp
c
      call opgradt (rw1,rw2,rw3,respr)
      call opbinv  (dv1,dv2,dv3,rw1,rw2,rw3,h2inv)
      call opadd2  (vxc,vyc,vzc,dv1,dv2,dv3)
c
      call cmult2  (prc,respr,bd(1),ntot2)
c
      return
      end
c-----------------------------------------------------------------------
      function get_ubar_azm(u,v,w)
      include 'SIZE'
      include 'TOTAL'

      real u(1),v(1),w(1)
      real num,den

      n=nx1*ny1*nz1*nelv

      num = 0.
      den = 0.

      do i=1,n
         x  = xm1(i,1,1,1)
         y  = ym1(i,1,1,1)
         z  = zm1(i,1,1,1)

         rr = x*x+y*y     ! Need to de-weight the volume integral (bm1) by
         ri = 1./sqrt(rr) ! 1/r in order to get x-sectional surface integral

         phi = atan2(x,y) ! clockwise from y axis
         us  = u(i)*cos(phi) - v(i)*sin(phi)
         usr = us*ri      ! Streamwise u/r
         num = num + usr*bm1(i,1,1,1)
         den = den +  ri*bm1(i,1,1,1)
      enddo

      num=glsum(num,1)
      den=glsum(den,1)
      ubar = num/den  ! "1/r"-weighted volumetric average of streamwise velocity

      get_ubar_azm = ubar

      return
      end
c-----------------------------------------------------------------------
      subroutine makebf_azm(bax,bay,baz)
      include 'SIZE'
      include 'TOTAL'

      real bax(lx1*ly1*lz1*lelv)
     $   , bay(lx1*ly1*lz1*lelv)
     $   , baz(lx1*ly1*lz1*lelv)

      n    = nx1*ny1*nz1*nelv
      r0   = glmax(ym1,n)-1.  ! Major radius (minor radius is 1.0)

      do i=1,n

         x=xm1(i,1,1,1)
         y=ym1(i,1,1,1)
         z=zm1(i,1,1,1)
         rr   = x*x+y*y
         r    = sqrt(rr)

         dpds = r0/r

         phi  = atan2(x,y)  ! phi measured clockwise from 12 noon

         bax(i) =  dpds*cos(phi)*bm1(i,1,1,1)
         bay(i) = -dpds*sin(phi)*bm1(i,1,1,1)
         baz(i) = 0.

      enddo

      return
      end
c-----------------------------------------------------------------------
