c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      if (istep.eq.0) call opzero(wx,wy,wz)
  
      call fill_div(usrdiv)  ! for outflow conditions

      call my_mesh_velocity  ! Fill mesh velocity


      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /vmsh/ xo(lx1,ly1,lz1,lelt),yo(lx1,ly1,lz1,lelt)
     $             ,zo(lx1,ly1,lz1,lelt)

      integer e,eg

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      epz = 1.e-5
      if (z.lt.epz) then
         rad = 0.5
         r2  = (x*x+y*y)/(rad*rad)
         uz  = 1.-r2
      else
         e  = gllel(eg)
         xx = xo(ix,iy,iz,e)
         yy = yo(ix,iy,iz,e)
         zz = zo(ix,iy,iz,e)
         call u_meshv(ux,uy,uz,xx,yy,zz,time)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0

      rad = 0.5
      r2  = (x*x+y*y)/(rad*rad)
      uz  = 1.-r2

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      param(59) = 1  ! all elements deformed
      
      ifxyo    = .true.
      ifusermv = .true.  ! define our own mesh velocity

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine fill_div(div)
c
c     Fill the domain with a nontrivial divergence, where desired.
c
c
      include 'SIZE'
      include 'TOTAL'
c
      integer icalld
      save    icalld
      data    icalld  /0/
c
      common /cvflow_d/ dist(lx2,ly2,lz2,lelt),dmax
      common /cvflow_l/ ifdivf
      logical ifdivf
c
      real div(lx2,ly2,lz2,lelv)
c
      ntot2 = nx2*ny2*nz2*nelv
      call rzero(div,ntot2)
      if (ifdivf) return
c
      if (icalld.eq.0) then
         icalld = 1
         call set_outflow_dist
      endif
      dmax2 = dmax*dmax
c
      call get_div_const(cdiv)
c
      nd    = 0
      do i=1,ntot2
         dd = dist(i,1,1,1)*dist(i,1,1,1)
         dd = min(dmax2,dd)
         if (dist(i,1,1,1).ne.0) div(i,1,1,1) = cdiv*(1-dd/dmax2)
         if (dist(i,1,1,1).ne.0) nd = nd+1
      enddo
      dsmin = glmin(dist,ntot2) 
      dsmax = glmax(dist,ntot2) 
      dvmin = glmin(div,ntot2) 
      dvmax = glmax(div,ntot2) 
      xd    = nd
      xd    = glsum(xd,1)
      nd    = xd
      if(nid.eq.0)write(6,1) istep,nd,dvmin,dvmax,dsmin,dsmax,cdiv,dmax2
    1 format(2i9,1p6e11.3,'divmnmx')
    2 format(2i9,1p2e11.3,'divdstm')
c
      return
      end
c-----------------------------------------------------------------------
      subroutine set_outflow_dist
c
c     Compute projected normal distance from outflow
c
      include 'SIZE'
      include 'TOTAL'
c
      common /cvflow_d/ dist(lx2,ly2,lz2,lelt),dmax
c
      integer e,f
c
c
      nxyz2 = nx2*ny2*nz2
      ntot2 = nx2*ny2*nz2*nelv
      ntot1 = nx1*ny1*nz1*nelv
c
      call rzero(dist,ntot2)
      davg = 0.
      wavg = 0.
c
      zmax = glmax(zm1,ntot1)
c
      do e=1,nelv
         if (cbc(6,e,1).eq.'O  ') then  ! Outflow
            do k=1,nxyz2
               dist(k,1,1,e) = zmax-zm2(k,1,1,e)
               davg = davg+dist(k,1,1,e)
               wavg = wavg+1.0
            enddo
         endif
      enddo
      dmax = glmax(dist,ntot2)
      davg = glsum(davg,1)
      wavg = glsum(wavg,1)
      if (wavg.gt.0) davg = davg/wavg
      if (nid.eq.0) write(6,1) dmax,davg,wavg
    1 format('div: davg:',1p3e12.4)
      dmax = 0.5*(dmax+davg)
c
      return
      end
c-----------------------------------------------------------------------
      subroutine get_div_const(cdiv)
c
c     Get constant multiplier for divergence
c
      include 'SIZE'
      include 'TOTAL'
c
      common /cvflow_d/ dist(lx2,ly2,lz2,lelt),dmax
      real flx(0:2)
c
      integer e,f

      vnmo_desired  = 2.

      cdivt         = 1.5*vnmo_desired/dmax
      cdiv          = max(0.,cdivt)       ! No contraction!

      if (nid.eq.0) write(6,1) istep,time,vnmo,dmax,cdiv,cdivt
    1 format(i9,1p5e13.5,'  cdiv')

      return
      end
c-----------------------------------------------------------------------
      subroutine my_mesh_velocity  ! Fill mesh velocity
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /vmsh/ xo(lx1,ly1,lz1,lelt),yo(lx1,ly1,lz1,lelt)
     $             ,zo(lx1,ly1,lz1,lelt)

      call u_meshv(ux,uy,uz,x,y,z,time)

      if (istep.eq.0) call opcopy(xo,yo,zo,xm1,ym1,zm1)

      rad = 0.5 ! nominal radius

      n = nx1*ny1*nz1*nelv
      do i=1,n
         x = xo(i,1,1,1)
         y = yo(i,1,1,1)
         z = zo(i,1,1,1)
         call u_meshv(ux,uy,uz,x,y,z,time)
         wx(i,1,1,1) = ux
         wy(i,1,1,1) = uy
         wz(i,1,1,1) = uz
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine u_meshv(ux,uy,uz,x,y,z,time)


      epsz  = sinh(0.2*z)/cosh(0.2*z)
      epst  = sinh(0.2*time)/cosh(0.2*time)
      eps   = epsz*epst

      one          = 1.0
      pi           = 4.0*atan(one)
      omega        = 1.0
      displacement = 0.1
      vmax         = displacement/omega
      wavelength   = 6.
      argzt        = 2.*pi*z/wavelength - omega*time
 
      theta = atan2(y,x)
      rad   = 0.5
      rct   = x/rad
      rst   = y/rad

      ux = -vmax*eps*rct*cos(argzt)
      uy = -vmax*eps*rst*cos(argzt)
      uz =  0

      return
      end
c-----------------------------------------------------------------------
