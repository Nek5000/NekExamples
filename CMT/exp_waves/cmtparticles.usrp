c----------------------------------------------------------------------
      subroutine place_particles
c
c     Place particles in this routine, also called for injection
c
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTPART'

      real    dum

      integer icalld
      save    icalld
      data    icalld  /-1/

      real   xdrange(2,3)
      common /domainrange/ xdrange
      real   xerange(2,3,lelt)
      common /elementrange/ xerange

      ! begin timer
      ptdum(3) = dnekclock()

      icalld = icalld + 1

      rpi    = 4.0*atan(1.) ! pi
      mu_0   = abs(param(2))

c     bounds to distribute particle between
      rxbo(1,1) = xdrange(1,1) + dp(2)/2.
      rxbo(2,1) = -0.3 - dp(2)/2.
      rxbo(1,2) = xdrange(1,2) + dp(2)/2.
      rxbo(2,2) = xdrange(2,2) - dp(2)/2.
      rxbo(1,3) = xdrange(1,3) + dp(2)/2.
      rxbo(2,3) = xdrange(2,3) - dp(2)/2.

      vol_distrib = (rxbo(2,1)-rxbo(1,1))*(rxbo(2,2)-rxbo(1,2))*
     >              (rxbo(2,3)-rxbo(1,3))

c     correct nwe if discrepancy
      nwe         = int(nw/np)                ! num. part per proc
      nw_tmp      = iglsum(nwe,1)
      if ((nw_tmp .ne. nw) .and. (nid.eq.0)) nwe = nwe + (nw - nw_tmp)

c     main loop to distribute particles
      do i = 1,nwe
         n = n + 1
         if (n.gt.llpart)then 
            write(6,*)'Not enough space to store more particles'
            call exitt
         endif

         ! distribute x,y,z coordinates
         do j=0,2
            rval = unif_random(rxbo(1,j+1),rxbo(2,j+1))
            rpart(jx+j,n)  = rval
            rpart(jx1+j,n) = rval
            rpart(jx2+j,n) = rval
            rpart(jx3+j,n) = rval
         enddo

c        set some rpart values for later use
         rpart(jdp,n)   = unif_random(dp(1),dp(2)) ! particle diameter
         tau_p          = rpart(jdp,n)**2*rho_p/18.0d+0/mu_0  ! part. time scale stokes

         ! fake here, so that particles move fast
         tau_p = 100.*dt
         rpart(jdp,n) = sqrt(tau_p*18.*mu_0/rho_p)
         ! end fake here

         rpart(jtaup,n) = tau_p     ! particle time scale
         rpart(jrhop,n) = rho_p     ! material density of particle
         rpart(jvol,n)  = rpi*rpart(jdp,n)**3/6.! particle volume
         rpart(jspl,n)  = 1.        ! super particle loading
         rpart(jgam,n)  = 1.        ! initial integration correction

         rpart(jtemp,n)  = tp_0     ! intial temp as fluid air
         rpart(jtempf,n) = tp_0     ! intial temp as fluid air
         rpart(jrho,n)   = param(1) ! later overwritten by interpolation

c        set global particle id (3 part tag)
         ipart(jpid1,n) = nid 
         ipart(jpid2,n) = i
         ipart(jpid3,n) = icalld
      enddo

      ! super particle loading for polydisperse particles
      if (nitspl.gt.0) then
      if (istep.eq. 0 .or.istep .eq.1) then ! be careful if injecting
      rdumv = 0.
      do i=1,n
         rdumv = rdumv + rpart(jvol,i)
      enddo
      rdumt = glsum(rdumv,1)
      if (two_way.gt.1) then
      do i=1,n
            rpart(jspl,i) =  phi_desire*vol_distrib/(rdumt)
      enddo
      endif
      endif
      endif

c     check if zstart and zlen is alright for a 2d case
      if (.not. if3d) then
          if (abs(zstart-1.0) .gt. 1E-16) then
             write(6,*)'***particle zstart is not right for 2d case'
             call exitt
          elseif(abs(zlen) .gt. 1E-16) then
             write(6,*)'***particle zlen is not right for 2d case'
             call exitt
         endif
      endif

      ! end timer
      pttime(3) = pttime(3) + dnekclock() - ptdum(3)
      return
      end
c-----------------------------------------------------------------------
      subroutine usr_particles_f_user(ii,jj)
c
c     extra body forces (total force, must have mass here)
c
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTPART'

      real pmass,pmassf

      pmass = rpart(jvol,ii)*rpart(jrhop,ii)
      pmassf= rpart(jvol,ii)*rpart(jrho,ii)

      if (jj.eq.0) rpart(jfusr+jj,ii) = 0.0 
      if (jj.eq.1) rpart(jfusr+jj,ii) = 0.0
      if (jj.eq.2) rpart(jfusr+jj,ii) = 0.0

      return
      end
c----------------------------------------------------------------------
      subroutine pre_sim_collisions
c
c     time stepping routine for pre-simulation collisions/settling
c
      include 'SIZE'
      include 'TOTAL'
      include 'CTIMER'
      include 'CMTDATA'
      include 'CMTPART'

      ! nothing to do in this case

      return
      end
c----------------------------------------------------------------------
