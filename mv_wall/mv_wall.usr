c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff  = 0
      utrans = 0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.
      ffy = 0.
      ffz = 0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,f,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,eg,f
      character*3 bccv

      common /c_mybc/ umeshx(lx1,ly1,lz1,lelt)
     $              , umeshy(lx1,ly1,lz1,lelt)
     $              , umeshz(lx1,ly1,lz1,lelt)

      e    = gllel(eg)
      bccv = cbc(f,e,1)
      yy   = ym1(ix,iy,iz,e)

      ux   = 4.0*yy*(1.0-yy)  ! Inlet  
      uy   = 0.0
      uz   = 0.0

      if (bccv.eq.'mv ') then
          ux = umeshx(ix,iy,iz,e)
          uy = umeshy(ix,iy,iz,e)
          uz = umeshz(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,ieg,f

      e = gllel(ieg)
 
      xx=xm1(ix,iy,iz,e)
      yy=ym1(ix,iy,iz,e)

      ux = 4.0*yy*(1.0-yy)  
      uy = 0.0 
      uz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      common /cdata/ Re_veri, St_veri, a_eps, b_o, 
     $               h_max, x1_o, x2_o, x3_o, T_per, freq_o
      real           Re_veri, St_veri, a_eps, b_o, 
     $               h_max, x1_o, x2_o, x3_o, T_per, freq_o

      n = nx1*ny1*nz1*nelt
      Re_veri  = abs(1/param(2))
      St_veri  = 0.037
      b_o      = 1.0      ! Channel Height
      a_eps    = 4.14     
      h_max    = 0.38
      x1_o     = 4.0*b_o
      x3_o     = 6.5*b_o
      x2_o     = 0.5*(x1_o + x3_o)
      T_per    = b_o/St_veri
      freq_o   = 1/T_per

      param(59) = 1  ! all elements deformed

C  ------------ Set logical flags ------------------------------
      ifxyo     = .true.
      ifmvbd    = .true.  ! moving boundary
      ifusermv  = .true.  ! define our own mesh velocity
      param(59) = 1       ! all elements deformed

      if (nid.eq.0) then
      write(6,'(A)') '-----------------------------------------------'
      write(6,'(A)') '------- Moving Indentation Ref. Data ----------'
      write(6,2) 'Reynolds Number:          ', Re_veri 
      write(6,2) 'Strouhal (Fixed):         ', St_veri   
      write(6,2) 'Frequency Excited (f_e):  ', freq_o   
      endif

C  ------------ Output Geometry -------------------------------
      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      if (nid.eq.0) then
        write(6,'(A)') '---------- Before rescaling ---------- '
        write(6,'(A,1p2e11.3)') '  xmin, xmax = ', xmin, xmax
        write(6,'(A,1p2e11.3)') '  ymin, ymax = ', ymin, ymax
      endif

C  ------------ SHIFT the Geometry -------------------------------
       shift = 6.25
       call cadd(xm1,shift,n)

c  Change Checkpoint Frequency according to Literature
c     timeio = T_per/10; --> Produces Results at t* = 0.1, 0.2, 0.3,...1.0 
      timeio = T_per/20

      if (nid.eq.0)
     & write(6,*) 'Set IOTIME = ',timeio
                   
   2  format(A,1pe18.10)

      dtinit = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      parameter (lt=lx1*ly1*lz1*lelt)
      common /scrns/ vort(lt,3), w1(lt), w2(lt)
      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      common /mystuff/   sx(lt),sy(lt),sz(lt)

      common /xtream/ psi (lx1*ly1*lz1*lelt)
     $              , rhss(lx1*ly1*lz1*lelt)
     $              , h1s (lx1*ly1*lz1*lelt)
     $              , h2s (lx1*ly1*lz1*lelt)

      common /cdata/ Re_veri, St_veri, a_eps, b_o, 
     $               h_max, x1_o, x2_o, x3_o, T_per, freq_o
      real           Re_veri, St_veri, a_eps, b_o, 
     $               h_max, x1_o, x2_o, x3_o, T_per, freq_o
      
      real  m1
      character*3 cbv

      common /rdump/ ntdump
      
      n = nx1*ny1*nz1*nelv
      rq  = 2.
      uin = 0.
      call turb_outflow(d,m1,rq,uin)

c     to shorten the run
c     avoid advection of steram function
      ifheat=.false.
c     get streamfunction only if it is necessary
      if (ifoutfld) then        
         call comp_vort3(vort , w1, w2, vx, vy, vz)
         call copy (t,vort,n)   ! Vorticity --> T
         ifto = .true.          ! Dump vorticity as T

c . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
c     Compute streamfunction from vorticity
         call col3 (rhss,bm1,t,n) ! B*omega
         call rone (h1s,n)
         call rzero(h2s,n)

         ifield = 2
         tol    = param(22)
         imsh   = 2
         call hmholtz('psi ',psi,rhss,h1s,h2s,tmask,tmult,imsh,
     $        tol,200,1)
         call copy (t,psi,n)    ! Psi --> T (for output)
      endif
c. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 

      ifusermv = .true.
      if (ifusermv) call my_meshv      ! Compute our own mesh velocity

      t_ndim = freq_o*time

      if (nid.eq.0) then
      write(6,2) 'time (non-dimen):          ', t_ndim 
      endif


   2  format(A,1pe18.10)

      return
      end
c-----------------------------------------------------------------------
      subroutine my_base_meshv(basev,h1,h2,rhs,msk,tmp)
      include 'SIZE'
      include 'TOTAL'
      real basev(lx1,ly1,lz1,lelt),tmp(lx1,ly1,lz1,lelt)
      real h1(1),h2(1),rhs(1),msk(1)
      real m1
      integer e,f

      n = nx1*ny1*nz1*nelv

      call rone (h1 ,n)  ! H*u = -div (h1 grad u) + h2 u = 0
      call rzero(h2 ,n)  ! h2  = 0
      call rone (msk,n)  ! Mask, for Dirichlet boundary values
      call rzero(tmp,n)  ! RHS for Laplace solver

c
c     Modify h1 to make blending function constant near the bottom moving boundary.
c     The idea here is to push the majority of the mesh deformation to the 
c     far field, away from where the fine, boundary-layer-resolving elements
c     are close to the cylinder.
c
      delta = 1.0
      do i=1,n
         y=ym1(i,1,1,1)
         rr  = y*y
         arg = -rr/(delta**2)
         h1(i) = h1(i) + 1.0*exp(arg)
      enddo

      m1 = -1.
      z0 =  0.

      nface = 2*ndim
      do e=1,nelv
      do f=1,nface

c        Set Dirichlet for mesh velocity on all non-interior boundaries
         if (cbc(f,e,1).ne.'E  ') call facev(msk,e,f,z0,nx1,ny1,nz1)

c        Set inhomogeneous Dirichlet data on cylinder
         if (cbc(f,e,1).eq.'mv ') then
           ! call fcaver(xavg,xm1,e,f)
           call facev(tmp,e,f,m1,nx1,ny1,nz1)
         endif

      enddo
      enddo
      call axhelm (rhs,tmp,h1,h2,1,1)

      tol    = 1.e-4
      imsh   = 1
      ifield = 1
      call hmholtz('mshv',basev,rhs,h1,h2,msk,vmult,imsh,tol,200,1)
      call sub2(basev,tmp,n)

c     BELOW JUST FOR DIAGNOSTICS
c     call outpost(basev,basev,basev,basev,basev,'   ')
c     call exitti('quit in my_base_meshv$',nelt)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine my_meshv
      include 'SIZE'
      include 'TOTAL'
      parameter (lt=lx1*ly1*lz1*lelv)
      common /scrns/  h1(lt),h2(lt),rhs(lt),msk(lt),tmp(lt)
      real msk

      common /cmeshv/ basev(lt)   ! Save base interpolation function

      common /c_mybc/ umeshx(lx1,ly1,lz1,lelt)
     $              , umeshy(lx1,ly1,lz1,lelt)
     $              , umeshz(lx1,ly1,lz1,lelt)

      common /cdata/ Re_veri, St_veri, a_eps, b_o, 
     $               h_max, x1_o, x2_o, x3_o, T_per, freq_o
      real           Re_veri, St_veri, a_eps, b_o, 
     $               h_max, x1_o, x2_o, x3_o, T_per, freq_o

c     Set up base interpolation function.
c
c     This is the expensive part where we find a smooth
c     interpolant between the moving boundary and fixed boundaries.
c
c     Note that it is called only once.
c
c     Note also that you have other types of motions you might (or
c     might not) need an addition interpolating basis function.
c
      if (istep.eq.0) call my_base_meshv(basev,h1,h2,rhs,msk,tmp)

      frequency = freq_o
      amplitude = 0.5*h_max
      omega     = frequency*2*pi
      hh        = amplitude*(1-cos(omega*time))
      hh_t      = amplitude*omega*sin(omega*time)

      n = nx1*ny1*nz1*nelv

      do i=1,n                          ! Translational velocity

         xx          = abs(xm1(i,1,1,1))
         arg         = a_eps*(xx-x2_o)
         uc_o        = 0.5*(1-tanh(arg)) 
         ucy         = hh_t*uc_o

         wx(i,1,1,1) = 0.0              ! component.
         wy(i,1,1,1) = basev(i)*ucy
         wz(i,1,1,1) = 0.0

         umeshx(i,1,1,1) = wx(i,1,1,1)
         umeshy(i,1,1,1) = wy(i,1,1,1)
         umeshz(i,1,1,1) = wz(i,1,1,1)

      enddo

      return
      end
c-----------------------------------------------------------------------
