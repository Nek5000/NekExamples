c-----------------------------------------------------------------------

c  Set number of profile points as a parameter in this user file.
#define mprof 2501

C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq2(q) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real q(lx1, ly1, lz1, lelt)

c      if (ifcoup) then
c         call nekMOAB_import_vars(tTag, 0, q)
c      elseif (ifvcoup) then
c         call nekMOAB_import_vars(vtTag, 1, q)
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /mygeom/ y0,y1

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      if (y.gt.y0) ux = ( (y-y0)/(y1-y0) )**(lx1-1)

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,ieg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /mygeom/ y0,y1

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      if (y.gt.y0) ux = ( (y-y0)/(y1-y0) )**(lx1-1)

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      common /myprof/ uvw(ldim,mprof),xyz(ldim,mprof)
      

      n = nx1*ny1*nz1*nelt

      if (istep.eq.0) return

      ifto = .true.
      call lambda2(t)
      call domain_size(xmin,xmax,ymin,ymax,zmin,zmax)

      dy = (ymax-ymin)/(mprof-1)

      do i=1,mprof
         y = ymin + dy*(i-1)
         xyz(1,i) = -.00001 ! x coordinate
         xyz(2,i) = y ! y coordinate
      enddo

      n = 0
      if (nid.eq.0) n = mprof
      call interp_v(uvw,xyz,n)

      if (nid.eq.0) then
        eps = 1.e-18
        do i=1,mprof
           u2 = abs(uvw(1,i))
           ul = log(u2+eps)
           write(6,1) i,xyz(2,i),uvw(1,i),u2,ul
   1       format(i5,1p4e15.7,' ulog')
        enddo

        call analyze_prof(xyz,uvw,n)

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      common /mygeom/ y0,y1

      integer e,f

      ymin  = 0
      ymax  = 1
      angle = 14.25*pi/180
      xmax  = tan(angle)
      xmin  = -xmax

      call rescale_x(xm1,xmin,xmax)
      call rescale_x(ym1,ymin,ymax)


      nface = 2*ndim
      nxyz  = nx1*ny1*nz1

      y1 = 1.
      y0 = 1.

      do e=1,nelt              ! Check if on the top of the domain
      do f=1,nface
         if (cbc(f,e,1).eq.'V  ') y0 = vlmin(ym1(1,1,1,e),nxyz)
      enddo
      enddo
      y0 = glmin(y0,1)         ! Take min over all processors

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
C=======================================================================
      subroutine interp_v(uvw,xyz,n)
c
c     evaluate velocity for list of points xyz
c
      include 'SIZE'
      include 'TOTAL'

      real uvw(ldim,n),xyz(ldim,n)

      parameter(nmax=mprof,nfldmx=ldim) 

      common /rwk_intp/ 
     $       fwrk(lx1*ly1*lz1*lelt,nfldmx),
     $       rwk(nmax,ldim+1),
     $       fpts(ldim*nmax),
     $       pts(ldim*nmax)
      common /iwk_intp/ 
     $       iwk(nmax,3)


      integer icalld,e
      save    icalld
      data    icalld /0/

      nxyz  = nx1*ny1*nz1
      ntot  = nxyz*nelt

      if (n.gt.nmax) call exitti ('n > nmax in interp_v!$',n)
      
      if (nelgt.ne.nelgv) call exitti
     $   ('nelgt.ne.nelgv not yet supported in interp_v!$',nelgv)

      do i=1,n				! ? not moving -> save?
         pts(i)     = xyz(1,i)
         pts(i + n) = xyz(2,i)
         if (ldim.eq.3) pts(i + n*2) = xyz(ldim,i)
      enddo

      if (icalld.eq.0) then		! interpolation setup
        icalld = 1
        tolin  = 1.e-8
        call intp_setup(tolin)
      endif

      ! pack working array
      call opcopy(fwrk(1,1),fwrk(1,2),fwrk(1,ldim),vx,vy,vz)

      ! interpolate
      call intp_do(fpts,fwrk,ndim,
     $             pts(1),pts(1+n),pts(2*n+1),n,
     $             iwk,rwk,nmax,.true.)

      do i=1,n
         uvw(1,i) = fpts(i)
         uvw(2,i) = fpts(i + n)
         if (ldim.eq.3) uvw(ldim,i) = fpts(i + n*2)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine particle_advect_std(x,vh,partv,npart)

c     Lagrangian particle advection

      include 'SIZE'
      include 'TOTAL'

      real x(ldim,mprof),vh(ldim,2:3,mprof),partv(mprof)
      common /scruz/ u1(ldim,mprof)

      common /padvc/ xmx(ldim,0:2)

      if (istep.eq.0) then      ! AB1
         call rzero(vh,3*ndim*npart) 
         c1 = 1.
         c2 = 0.
         c3 = 0.
      elseif (istep.eq.1) then  ! AB2
         c1 = 3
         c2 = -1.
         c3 = 0
         c1 = c1/2.
         c2 = c2/2.
      else                    ! AB3
         c1 = 23.
         c2 = -16.
         c3 = 5.
         c1 = c1/12.
         c2 = c2/12.
         c3 = c3/12
      endif


      call interp_v(u1,x,npart) 

      do i=1,npart
      do k=1,ndim
C     Update particle position and history
           x(k,i) = x(k,i) 
     $              + dt*(c1*u1(k,i) + c2*vh(k,2,i) + c3*vh(k,3,i))
C     Update particle and fluid velocity history
           vh(k,3,i) = vh(k,2,i)
           vh(k,2,i) = u1(k,i)
      enddo
      enddo

      return
      end
c----------------------------------------------------------------------
      subroutine particle_out (x,partid,partv,npart,ipstep)
      include 'SIZE'
      include 'TOTAL'
      
      real x(ldim,mprof),partv(mprof)
      integer partid(mprof)

      common /scrns/ x_tmp(ldim+1,mprof),work(ldim+1,mprof)

      character*128 fname

      integer icalld
      save    icalld
      data    icalld  /0/

      if (mod(istep,ipstep).ne.0) return

      icalld = icalld+1
      if (nid.eq.0) then
        write(fname,1) icalld
 1      format('part',i5.5,'.3D')
        open(unit=72,file=fname)
      endif

      min_points = iglmin(partid,npart)
      max_points = iglmax(partid,npart)
      n_active   = max_points - min_points + 1
      npass = n_active / mprof
      if (n_active.gt.npass*mprof) npass = npass+1
      ilast=min_points-1

      do ipass=1,npass

        mpart = min(mprof,max_points-ilast)
        i0    = ilast
        i1    = i0 + mpart
        ilast = i1

        call rzero(x_tmp,(ldim+1)*mprof)
        do ii=1,npart
          if (i0.lt.partid(ii).and.partid(ii).le.i1) then
            i = partid(ii)-i0
            call copy(x_tmp(1,i),x(1,ii),ldim)  ! Coordinates
            x_tmp(ldim+1,i) = partv(ii)         ! Store value here
          endif
        enddo

        call gop(x_tmp,work,'+  ',(ldim+1)*mprof)
        if (nid.eq.0) write(72,2)((x_tmp(k,i),k=1,ldim+1),i=1,mpart)
 2      format(1p4e17.9)
        
      enddo

      if (nid.eq.0) close(72)

      return
      end
C-----------------------------------------------------------------------
      subroutine my_particle_generator(ipstep) ! Particle injection
      include 'SIZE'
      include 'TOTAL'
      include 'mpif.h'

      common /rparts/ pts(ldim,mprof),vel(ldim,2:3,mprof),partv(mprof)
      common /iparts/ npart,partid(mprof)
      integer partid

      real ptime           ! Time the particle motion
      save ptime
      data ptime  /0./

      ptime0 = dnekclock_sync()

      call particle_init       (pts,partid,partv,npart,ipstep)
      call particle_advect_std (pts,vel,partv,npart)
      call particle_out        (pts,partid,partv,npart,ipstep)

      ptime1 = dnekclock_sync() ! Track computational cost of particles

      dptime = (ptime1-ptime0)
      ptime  = ptime + dptime

      if (mod(istep,ipstep).eq.0) then
         npmin = iglmin(npart,1)
         npmax = iglmax(npart,1)
         nptot = iglsum(npart,1)
         npmav = nptot/np
         ptpp  = dptime / nptot  ! particle-time per point
         if (nid.eq.0) write(6,1)
     $      istep,npmin,npmav,npmax,nptot,ptpp,dptime,ptime,time
    1       format(4i7,i9,1p4e15.7,' ptime')
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine particle_init(x,partid,partv,npart,ipstep)
c
c     This version does continuous injection and overwrites old entries
c
      include 'SIZE'
      include 'TOTAL'

      real x(ldim,mprof),partv(mprof)
      integer partid(mprof)

      integer lcount,icount
      save    lcount,icount
      data    lcount,icount /0,0/

      if (mod(istep,ipstep).ne.0) return

      lmprof = mprof

      dx = 0.05
      dy = .025
      ds = (1-dy)/100

      k0 = 0
      k  = icount       ! icount = total # particles emitted
      l  = lcount       ! Index into local particle array

      nw = 100

      do iline = 1,4    ! 4 lines at different heights
        xp = -1.0
        zp = .05 + (iline-1)*0.075
        do ipart = 1,nw  ! nw points on a wire

         dy =  0.6*2/(nw-1)
         yp = -0.6 + dy*(ipart-1)

         if (mod(k,np).eq.nid) then ! Inject particle _only_ on this processor
            l=l+1  ! local count
            if (l.gt.lmprof) l=1 ! Retire old particles by overwriting their data
            x(ldim,l) = zp
            x(2   ,l) = yp
            x(1   ,l) = xp
            partid(l) = k+1
c           partv(l) = time  ! A simple coloring scheme
c           partv(l) = k0    ! Another simple coloring scheme
            partv(l) = iline ! color by line
         endif
            
         k = k+1     ! Total count

      enddo

      k0= k0+1    ! Count for this release (for coloring only)

      enddo

      icount = k
      lcount = l
      npart  = max(npart,lcount)

      return
      end
c-----------------------------------------------------------------------
      subroutine analyze_prof(xyz,uvw,n)
      include 'SIZE'
      include 'TOTAL'

      real uvw(ldim,n),xyz(ldim,n)
      real eddy_size(mprof+1),eddy_strength(mprof+1)

      u0 = uvw(1,1)
      y0 = xyz(2,1)
      umax = abs(u0)
      ylast= y0
      k    = 0
      u1=u0

      do i=2,n
         u0=u1
         u1=uvw(1,i)
         y1=xyz(2,i)

         if (u1*u0.le.0) then
            k=k+1
            eddy_size(k)     = abs(y1-ylast)
            eddy_strength(k) = umax
            ylast = y1
            umax  = 0
         endif
         umax = max(umax,abs(u1))
      enddo
      kmax = k

      st_errmn = 1.e21
      sz_errmn = 1.e21

      st_ratio = eddy_strength(2)/eddy_strength(1)
      sz_ratio = eddy_size(2)/eddy_size(1)
      do k=1,kmax
         write(6,2) k,eddy_size(k),eddy_strength(k),sz_ratio,st_ratio
    2    format(i5,1p4e16.7,' eddy')
         st_ratio = eddy_strength(k+1)/eddy_strength(k)
         sz_ratio = eddy_size(k+1)/eddy_size(k)

c
c        This part is to test Nek5000's consistency for future releases.

         st_ratio_exact = 408.37                             ! from moff2.m
         st_error = abs(st_ratio_exact-st_ratio)
         st_errmn = min(st_errmn,st_error)

         sz_ratio_exact = 2.031                              ! from moff2.m
         sz_error = abs(sz_ratio_exact-sz_ratio)
         sz_errmn = min(sz_errmn,sz_error)

      enddo

      err_min = .001   ! Test for relative error in eddy strength

      st_errmn = st_errmn/st_ratio_exact
      sz_errmn = sz_errmn/sz_ratio_exact

      if (st_errmn.lt.err_min) then
         if (nio.eq.0) write(6,3) st_errmn,sz_errmn
    3    format('Success: relative strength/size errors: ',1p2e12.4)
      else
         if (nio.eq.0) write(6,4) st_errmn,err_min
    4    format('ERROR TOO LARGE FOR MOFFATT CASE: ',1p2e12.4)
      endif

      return
      end
c-----------------------------------------------------------------------
